#!/usr/local/bin/bash

SERVERS=$(curl --silent https://nordvpn.com/api/server/stats)

# Reset in case getopts has been used previously in the shell.
OPTIND=1

location="" # An empty strings matches all possible locations
capacity=70 # Default capacity value is 70%

iso_codes=('ad' 'ae' 'af' 'ag' 'ai' 'al' 'am' 'ao' 'aq' 'ar' 'as' 'at' 'au' 'aw' 'ax' 'az' 'ba' 'bb' 'bd' 'be' 'bf' 'bg' 'bh' 'bi' 'bj' 'bl' 'bm' 'bn' 'bo' 'bq' 'br' 'bs' 'bt' 'bv' 'bw' 'by' 'bz' 'ca' 'cc' 'cd' 'cf' 'cg' 'ch' 'ci' 'ck' 'cl' 'cm' 'cn' 'co' 'cr' 'cu' 'cv' 'cw' 'cx' 'cy' 'cz' 'de' 'dj' 'dk' 'dm' 'do' 'dz' 'ec' 'ee' 'eg' 'eh' 'er' 'es' 'et' 'fi' 'fj' 'fk' 'fm' 'fo' 'fr' 'ga' 'gb' 'gd' 'ge' 'gf' 'gg' 'gh' 'gi' 'gl' 'gm' 'gn' 'gp' 'gq' 'gr' 'gs' 'gt' 'gu' 'gw' 'gy' 'hk' 'hm' 'hn' 'hr' 'ht' 'hu' 'id' 'ie' 'il' 'im' 'in' 'io' 'iq' 'ir' 'is' 'it' 'je' 'jm' 'jo' 'jp' 'ke' 'kg' 'kh' 'ki' 'km' 'kn' 'kp' 'kr' 'kw' 'ky' 'kz' 'la' 'lb' 'lc' 'li' 'lk' 'lr' 'ls' 'lt' 'lu' 'lv' 'ly' 'ma' 'mc' 'md' 'me' 'mf' 'mg' 'mh' 'mk' 'ml' 'mm' 'mn' 'mo' 'mp' 'mq' 'mr' 'ms' 'mt' 'mu' 'mv' 'mw' 'mx' 'my' 'mz' 'na' 'nc' 'ne' 'nf' 'ng' 'ni' 'nl' 'no' 'np' 'nr' 'nu' 'nz' 'om' 'pa' 'pe' 'pf' 'pg' 'ph' 'pk' 'pl' 'pm' 'pn' 'pr' 'ps' 'pt' 'pw' 'py' 'qa' 're' 'ro' 'rs' 'ru' 'rw' 'sa' 'sb' 'sc' 'sd' 'se' 'sg' 'sh' 'si' 'sj' 'sk' 'sl' 'sm' 'sn' 'so' 'sr' 'ss' 'st' 'sv' 'sx' 'sy' 'sz' 'tc' 'td' 'tf' 'tg' 'th' 'tj' 'tk' 'tl' 'tm' 'tn' 'to' 'tr' 'tt' 'tv' 'tw' 'tz' 'ua' 'ug' 'um' 'us' 'uy' 'uz' 'va' 'vc' 've' 'vg' 'vi' 'vn' 'vu' 'wf' 'ws' 'ye' 'yt' 'za' 'zm' 'zw')

array_contains () { 
  local array="$1[@]"
  local seeking=$2
  local in=1
  for element in "${!array}"; do
    if [[ $element == $seeking ]]; then
      in=0
      break
    fi
  done
  return $in
}

while getopts ":l:c:h" opt; do
    case "$opt" in
    h)
      show_help
      exit 0
      ;;
    l)
      array_contains iso_codes "$OPTARG"  && location=$OPTARG >&2 || \
        { echo "Invalid location. Please provide a valid, 2-letter ISO 3166-1 code to -l. (ex: -l us)"; exit 1; }
      ;;
    c)
      capacity=$OPTARG >&2
      ;;
    :)
      echo "Option -$OPTARG requires an argument."
      echo "Use -h to show help." >&2
      exit 1
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      echo "Use -h to show help." >&2
      exit 1
      ;;
    esac
done

echo "Looking for servers in ${location^^} with current capacity higher than $capacity%..."

jq --compact-output -r --arg location $location --arg capacity $capacity \
  '[. | to_entries[] | {server: .key, capacity: .value.percent} | select(.capacity > ($capacity|tonumber)) | select(.server | contains($location))] | sort_by(-.capacity) | .[]' \
  <<<"$SERVERS"
